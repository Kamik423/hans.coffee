<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Hans Schülein</title><description>Hans Schülein</description><link>https://hans.coffee</link><language>en</language><lastBuildDate>Fri, 1 Sep 2023 10:52:04 +0200</lastBuildDate><pubDate>Fri, 1 Sep 2023 10:52:04 +0200</pubDate><ttl>250</ttl><atom:link href="https://hans.coffee/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hans.coffee/blog/subl-on-wsl</guid><title>How to Open Sublime Text From Windows Subsystem for Linux Version 2</title><description></description><link>https://hans.coffee/blog/subl-on-wsl</link><pubDate>Wed, 30 Aug 2023 21:30:00 +0200</pubDate><content:encoded><![CDATA[<h1>How to Open Sublime Text From Windows Subsystem for Linux Version 2</h1><p>In my current workflow for my day-job, I frequently find myself using my preferred shell <a href="http://fishshell.com">fish</a> through the Windows Subsystem for Linux version 2 – or <abbr><span class='real-caps'>WSL</span><span class='small-caps' hidden>wsl</span></abbr> 2 – to do operations on files in the Windows file system. One of my most common operations is that I want to open a file in my preferred editor – Sublime Text. When just using the regular shell in any operating system, Sublime Text provides the shell command <code>subl</code> that opens Sublime Text. I now want to open the Windows application from the Linux shell to open a file on Windows. Microsoft even provides a <code>wslpath</code> utility that can translate a path in the <abbr><span class='real-caps'>WSL</span><span class='small-caps' hidden>wsl</span></abbr> into a true Windows one or the other way round. A factor that adds additional complexity to this task is <code>subl</code> having command line arguments that I might want to use:</p><div class="highlight"><pre><span></span><code>Sublime Text build 4152

Usage: subl [arguments] [files]         Edit the given files
   or: subl [arguments] [directories]   Open the given directories
   or: subl [arguments] -- [files]      Edit files that may start with &#39;-&#39;
   or: subl [arguments] -               Edit stdin
   or: subl [arguments] - &gt;out          Edit stdin and write the edit to stdout

Arguments:
  --project &lt;project&gt;:    Load the given project
  --command &lt;command&gt;:    Run the given command
  -n or --new-window:     Open a new window
  --launch-or-new-window: Only open a new window if the application is open
  -a or --add:            Add folders to the current window
  -w or --wait:           Wait for the files to be closed before returning
  -b or --background:     Don&#39;t activate the application
  -s or --stay:           Keep the application activated after closing the file
  --safe-mode:            Launch using a sandboxed (clean) environment
  -h or --help:           Show help (this message) and exit
  -v or --version:        Show version and exit

--wait is implied if reading from stdin. Use --stay to not switch back
to the terminal when a file is closed (only relevant if waiting for a file).

Filenames may be given a :line or :line:column suffix to open at a specific
location.
</code></pre></div><p>I especially care about the <code>--wait</code> flag, since this enables me to use Sublime Text as an editor, for example for setting git commit messages. Additionally it needs to be considered that if the <code>--help</code> flag is used, usually no path is added as argument.</p><p>I then whipped up this quick Python script. It passes on arguments that look like flags (starting with a <code>-</code>) to Windows’ <code>subl</code> and assumes that any other one is a path and translates it to a Windows one.</p><div class="highlight"><pre><span></span><code><span class="ch">#!/usr/bin/env python3</span>

<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1"># The path to the Sublime Text Windows executable in the Linxu file-system.</span>
<span class="n">SUBL</span> <span class="o">=</span> <span class="s2">&quot;/mnt/c/Program Files/Sublime Text/subl.exe&quot;</span>


<span class="k">def</span> <span class="nf">window_path</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="c1"># Convert a Linux path to a Windows one so Sublime Text understands it.</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;wslpath -aw &quot;</span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s1">&quot;&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">CalledProcessError</span><span class="p">(</span>
            <span class="n">returncode</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">cmd</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">stderr</span>
        <span class="p">)</span>
    <span class="c1"># Somehow `subl` only understands paths using slashes instead of backslashes</span>
    <span class="c1"># as you would expect from a Windows command line utility. So we replace all</span>
    <span class="c1"># of the backslashes with regular slashes. Afterwards spaces in the path are</span>
    <span class="c1"># escaped so `subl` understands any path as a single argument, not multiple.</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\\</span><span class="s2"> &quot;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="c1"># Execute the command on the Linux command line. Any argument beginning with</span>
    <span class="c1"># a `-` is passed on directly to `subl` (like `-w` or `--help`). However any</span>
    <span class="c1"># other argument is converted to a Windows path from a Linux one.</span>
    <span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;exec &quot;</span><span class="si">{</span><span class="n">SUBL</span><span class="si">}</span><span class="s1">&quot; &#39;</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
        <span class="p">[</span><span class="n">arg</span> <span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">window_path</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]]</span>
    <span class="p">)</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
        <span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span>
    <span class="p">)</span>
    <span class="c1"># Print any output of `subl` like help text or errors.</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="c1"># Pass through the return code</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</code></pre></div><p>I placed this file in <abbr><span class='real-caps'>WSL</span><span class='small-caps' hidden>wsl</span></abbr>’s <code>/usr/local/bin/</code> directory, named it <code>subl</code> (without any extension) and marked it as executable using</p><div class="highlight"><pre><span></span><code>sudo<span class="w"> </span>chmod<span class="w"> </span>a+x<span class="w"> </span>subl
</code></pre></div><p>Linux knows to execute this file with Python 3 since it starts with the <a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">shebang line</a> marking it as such. The utility passes on the exit code of <code>subl.exe</code> to <abbr><span class='real-caps'>WSL</span><span class='small-caps' hidden>wsl</span></abbr>. Any paths on the Windows side of the <abbr><span class='real-caps'>VM</span><span class='small-caps' hidden>vm</span></abbr> divide are easily understood. Paths that refer to files or directories on the Linux side use <code>\\wsl.localhost\Debian\</code> as the root directory. This mounts the <abbr><span class='real-caps'>WSL</span><span class='small-caps' hidden>wsl</span></abbr> 2 file system on Windows.</p><p>As a result this means that even temporary files on the Linux side, like git commit messages can be edited. You can even use fish’s <code>funced</code> command to edit functions with Sublime Text. to simplify the process, I set my <code>$EDITOR</code> environment variable to <code>sublw</code> which refers to another little script I put in the <code>/usr/local/bin</code> directory:</p><div class="highlight"><pre><span></span><code><span class="ch">#!/bin/bash</span>
subl<span class="w"> </span>-w<span class="w"> </span>
</code></pre></div><p>This uses the <code>-w</code> or <code>--wait</code> flag to only exit from the call once Sublime Text is closed again, i.e., after a user has edited and saved the file. Without this flag, the <code>subl</code> command would immediately return once the file is <em>opened</em> in Sublime Text.</p><p>With the <code>subl</code> and potentially the <code>sublw</code> utility you can now easily use Sublime Text on Windows from the Windows Subsystem for Linux. You should be able to just copy the code above or copy it from <a href="https://gist.github.com/Kamik423/80ebcef8d0308aa80307291394b19f5d">this GitHub gist</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hans.coffee/apps/Stempel</guid><title>Stempel</title><description></description><link>https://hans.coffee/apps/Stempel</link><pubDate>Wed, 9 Aug 2023 18:27:54 +0200</pubDate><content:encoded><![CDATA[<h1>Stempel</h1><h2>Create New Files</h2><p>Stempel is a native macOS app for creating new files in Finder. Users can manage templates that they edit in Stempel or in in any other editor of their choice. New files are created by right clicking in Finder or by adding an item to Finder’s toolbar.</p><figure><img src="https://hans.coffee/apps/Stempel/right-click.png" alt="Screenshot"/><figcaption>The right click menu in Finder showing the configured templates.</figcaption></figure><p>This is a natural behavior that users might expect as it is built into most other operating systems. There even is a <em>New Folder</em> button in the right click menu in Finder.</p><figure><img src="https://hans.coffee/apps/Stempel/main.png" alt="Screenshot"/><figcaption>A screenshot of Stempel showing multiple templates in the sidebar while editing the template for a <span class="latex">L<sup>a</sup>T<sub>e</sub>X</span> Document.</figcaption></figure><p>Templates can be managed right in the app, the sidebar shows a list of templates and they can be edited in the simple editor right in the app. However right clicking a template or using the <em>File</em> menu in the toolbar allows the user to open the file in their favorite editor like Sublime Text or Nova, or to reveal it in Finder.</p><figure><img src="https://hans.coffee/apps/Stempel/complex.png" alt="Screenshot"/><figcaption>An example of a file that cannot be edited as plain text. Clicking on it will open Numbers.</figcaption></figure><p>Stempel allows for editing of plain text files. Other files receive an inline preview and can be edited with an external app.</p><figure><img src="https://hans.coffee/apps/Stempel/folders.png" alt="Screenshot"/><figcaption>A template folder containing multiple files.</figcaption></figure><p>Even folders can be used as templates. This way complex projects like a website with <abbr><span class='real-caps'>HTML</span><span class='small-caps' hidden>html</span></abbr>, <abbr><span class='real-caps'>PHP</span><span class='small-caps' hidden>php</span></abbr> and JavaScript files can be instantiated easily from a template.</p><figure><img src="https://hans.coffee/apps/Stempel/permissions.png" alt="Screenshot"/><figcaption>The file permissions editor. This allows for new files to be marked as executable.</figcaption></figure><p>One powerful feature offered by Stempel is to configure <abbr><span class='real-caps'>POSIX</span><span class='small-caps' hidden>posix</span></abbr> permissions for files. Each file can be individually selected to be readable, executable, or writable for user, group, and world. This is especially handy when creating templates for executable files such as scripting languages like Python. Stempel allows for this configuration to occur via a graphical representation of the familiar <code>ls</code> output as a table. Presets allow for a quick configuration of text and script files.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hans.coffee/apps/Hexer</guid><title>Hexer</title><description></description><link>https://hans.coffee/apps/Hexer</link><pubDate>Wed, 9 Aug 2023 17:44:06 +0200</pubDate><content:encoded><![CDATA[<h1>Hexer</h1><h2>Hex File Viewer</h2><p>Hexer is a desktop level hex viewer packed with features. It was developed from the ground up for iOS and iPadOS. It is natural and intuitive to use for everyone. It is integrated with the Files app. So you can browse Dropbox, Google Drive, your git repositories, your downloads, your documents in iCloud Drive or your desktop. Or you can just share any file to it.</p><figure><img src="https://hans.coffee/apps/Hexer/main.png" alt="screenshot"/><figcaption>The primary screen in Hexer showing <abbr><span class='real-caps'>ASCII</span><span class='small-caps' hidden>ascii</span></abbr> and hexadecimal representation of a file. The analysis screen provides additional information about the document and the current selection.</figcaption></figure><p>Bytes are highlighted in different colors: Printable characters are cyan, spaces blue, null bytes grey, control characters pink and so on. The colors appear across the binary, hexadecimal, and <abbr><span class='real-caps'>ASCII</span><span class='small-caps' hidden>ascii</span></abbr> column — or can just be turned off completely.</p><figure><img src="https://hans.coffee/apps/Hexer/themes-and-options.png" alt="screenshot"/><figcaption>Overview of some of the themes available in Hexer. Themes can be set to always dark or light or to adapt to the system theme automatically. The right screenshot shows some of the options that can be configured, the code pages available as well as the order and visibility of the columns.</figcaption></figure><p>Multiple options are available to aid your inspection of files. Many popular themes from text editor and terminals are available. Line numbers can be shown and overscroll enabled. When you copy or share text you have complete control over the formatting. Column counts in powers of two (8 bytes, 16, 32, ...) or in any number that fits if you so choose. The app supports <abbr><span class='real-caps'>ASCII</span><span class='small-caps' hidden>ascii</span></abbr>, <abbr><span class='real-caps'>ISO</span><span class='small-caps' hidden>iso</span></abbr> Latin 1 and <abbr><span class='real-caps'>EBCDIC</span><span class='small-caps' hidden>ebcdic</span></abbr> code pages. The <abbr><span class='real-caps'>UI</span><span class='small-caps' hidden>ui</span></abbr> is navigable by keyboard on iPad and there are shortcuts to toggle almost everything. Further features are left for you to discover.</p><figure><img src="https://hans.coffee/apps/Hexer/search.png" alt="screenshot"/><figcaption>Search sidebar in Hexer. The sidebars in the iPad app take full screen on iPhone.</figcaption></figure><p>You can search even large files in Hexer. While searching you have the option to choose the <abbr><span class='real-caps'>ASCII</span><span class='small-caps' hidden>ascii</span></abbr> or hexadecimal column in case you are looking for specific byte sequences. Results can be filtered with regular expression and case sensitivity can be enabled or disabled. A list of results is previewed and you can jump to their location in the document and skip between the m with arrow keys on iPad.</p><p>Hexer allows for detailed analysis of files or the current selection. You can decode to integers, see byte frequencies, detect file signatures – also known as magic numbers – or read metadata like creation date and <abbr><span class='real-caps'>UNIX</span><span class='small-caps' hidden>unix</span></abbr> permissions.</p><h2>The App is made by a real person out of love</h2><p>When you buy the app (no hidden in app purchases) the money goes straight to me to support development of this and other apps. If you have any questions or feature requests you can just write me an email and let me know. I will continue development with many more planned features like editing.</p><h2>The App is friendly</h2><p>There are no in app purchases, ads, tracking, nor is there any data collected. You buy it once and then use it. Nothing more. Nothing less.</p>]]></content:encoded></item></channel></rss>